# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Publish Docker Image

on:
  workflow_dispatch:
  release:
    types: [published]
  push:
    branches:
      - main
    tags:
      - v*

permissions:
  contents: write    # para criar tags e releases

env:
  REGISTRY: docker.io
  IMAGE_NAME: arthurferroni/approachti-quepasa
  NODE_ENV: production
  APP_ENV: production
  QUEPASA_CONTAINER_NAME: "quepasa"
  QUEPASA_HOST_NAME: "quepasa"
  QUEPASA_MEMORY_LIMIT: 512M
  QUEPASA_EXTERNAL_PORT: 31000
  QUEPASA_INTERNAL_PORT: 31000
  WEBAPIPORT: 31000
  QUEPASA_BASIC_AUTH_USER: ${{ secrets.DOCKER_USERNAME }}
  QUEPASA_BASIC_AUTH_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  MIGRATIONS: './migrations'
  WEBSOCKETSSL: false

jobs:
  push_to_registry:
    name: Push Docker + GitHub Release
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 1) Build & push apenas com `latest`
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=schedule
            # marca latest em pushes na main
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
          flavor: |
            latest=true

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image (latest)
        uses: docker/build-push-action@v4.1.0
        with:
          context: .
          file: docker/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # 2) Se for push na main, extrai versÃ£o, cria tag e Release
      - name: Extract QpVersion
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: extract_version
        run: |
          VERSION=$(grep -Po '(?<=const QpVersion = ")[^"]+' src/models/qp_defaults.go)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Configure Git for tagging
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Create & push Git tag
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git tag -a "${{ env.VERSION }}" -m "Release ${{ env.VERSION }}"
          git push origin "${{ env.VERSION }}"

      - name: Create GitHub Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ env.VERSION }}
          name: "Release ${{ env.VERSION }}"
          body: |
            ðŸ“¦ Imagem Docker `${{ env.IMAGE_NAME }}:${{ env.VERSION }}` publicada!
            Commit: ${{ github.sha }}

      # 3) Re-build & push com tags `latest` + `<qpversion>`
      - name: Build and push Docker image with version tag
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v4.1.0
        with:
          context: .
          file: docker/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
